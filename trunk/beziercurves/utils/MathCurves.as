package beziercurves.utils {	import flash.geom.Point;			/**	 * Copyright (c) 2008 nicolas levavasseur	 * nicolas.levavasseur@gmail.com	 * 	 * @author nicolas levavasseur	 */	public class MathCurves {				/**		 * MathCurve is a static class, you cannot instanciate it		 */		public function MathCurves() {			throw new Error("MathCurves is a static class, you cannot instanciate it.");		}				/**		 * compute the factorial of an integer		 * 		 * @param n:int		 */		public static function fact(n:int):Number {			if( n == 0 ) return 1;			return n * fact(n-1);		}				/**		 * compute the binomial coefficient of two integers		 * 		 * @param n:int		 * @param k:int		 */		public static function binomialCoeff(n:int, k:int):Number {			return fact(n) / (fact(k) * fact(n - k));		}				/**		 * compute the Bernstein polynom		 * 		 * @param i:int		 * @param n:int		 * @param t:Number		 */		public static function B(i:int, n:int, t:Number):Number {			return binomialCoeff(n - 1, i) * Math.pow(1 - t, n - 1 - i) * Math.pow(t, i);		}				/**		 * compute the knot vector to discretize the [0, 1] interval		 * 		 * @param precision:int the length of the computed vector		 */		public static function knotVector(precision:int):Array {			var T:Array = [];			for(var i:int = 0; i <= precision; i++){				//T.push(i / precision);				//T.push((i / precision) * (i / precision));				T.push(Math.pow(i / precision, 1.01));			}			return T;		}				/**		 * multiply a 2D point with a number		 */		public static function multPoint(r:Number, p:Point):Point {			return new Point(r * p.x, r * p.y);		}				/**		 * add two points		 */		public static function addPoints(p0:Point, p1:Point):Point {			return new Point(p0.x + p1.x, p0.y + p1.y);		}	}}