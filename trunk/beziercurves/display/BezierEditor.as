package beziercurves.display {	import flash.events.MouseEvent;	import beziercurves.BezierCurve;	import beziercurves.events.PointEvent;	import flash.events.Event;	import beziercurves.utils.PointArray;	import beziercurves.display.DragablePoint;	import flash.display.Sprite;		/**	 * Copyright (c) 2008 nicolas levavasseur	 * nicolas.levavasseur@gmail.com	 * 	 * @author nicolas levavasseur	 */	public class BezierEditor extends Sprite {		private var pArray:PointArray;				/**		 * create the bezier editor that lets you edit the curve on the fly with the mouse		 */		public function BezierEditor(pArray:PointArray) {			this.pArray = pArray;		}				/**		 * draw the editor on the top of the curve		 */		public function draw():void {			drawLines();			drawPoints();		}				private function drawPoints():void {			for(var i:int = 0; i < pArray.length; i++) {				var p:DragablePoint = new DragablePoint(pArray[i]);				p.num = i;				p.addEventListener(PointEvent.MOVE, pointMoveHandler);				p.addEventListener(MouseEvent.CLICK, pointClickedHandler);				addChild(p);			}		}				private function pointClickedHandler(e:MouseEvent):void {			var p:DragablePoint = DragablePoint(e.target);			setChildIndex(p, numChildren - 1);		}				private function pointMoveHandler(e:Event):void {			var p:DragablePoint = DragablePoint(e.target);			pArray[p.num].x = p.x;			pArray[p.num].y = p.y;						BezierCurve(parent).redraw();		}				private function drawLines():void {			graphics.clear();			graphics.lineStyle(3, 0x000000, 0.05);			for(var j:int = 0; j < pArray.length; j++){				if( j == 0 ) graphics.moveTo(pArray[0].x, pArray[0].y);				else graphics.lineTo(pArray[j].x, pArray[j].y);			}		}				/**		 * update the geometry of the editor		 */		public function update():void {			drawLines();		}	}}