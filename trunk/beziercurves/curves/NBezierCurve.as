package beziercurves.curves {	import beziercurves.utils.BrushType;	import beziercurves.utils.MathCurves;	import beziercurves.utils.PointArray;		import flash.display.Sprite;	import flash.geom.Point;		/**	 * Copyright (c) 2008 nicolas levavasseur	 * nicolas.levavasseur@gmail.com	 * 	 * @author nicolas levavasseur	 */	public class NBezierCurve extends Sprite {		private var nPoints:int;		private var pArray:PointArray = new PointArray();		private var S:Array /* of Point */ = [];		private var thickness:int;		private var color:Number;		private var transparency:Number;		private var T:Array;		private var brush:String;				/**		 * create a bezier curve of degree n, begins and ends with a anchor point, n controls points betzween		 * 		 * @param p0:Point start point		 * @param p1:Point end point		 * @param controls:Array of Point the controls points between p0 and p1		 * @param thickness:int the thickness of the curve		 * @param color:Number the color of the curve		 * @param transparency:Number the transparency of the curve		 * @param brush:String determines the brush to use for the curve (see beziercurves.utils.BrushType)		 * @param precision:int the precision of the curve		 */		public function NBezierCurve(p0:Point, p1:Point, controls:Array /* of Point */, thickness:int, color:Number, transparency:Number, brush:String, precision:int) {			this.thickness = thickness;			this.color = color;			this.transparency = transparency;			this.brush = brush;						pArray = PointArray.copy(controls);			pArray.unshift(p0);			nPoints = pArray.push(p1);						T = MathCurves.knotVector(precision);						draw();		}		/**		 * draw the curve on the container		 */		public function draw():void {			graphics.clear();			//graphics.lineStyle(thickness, color, transparency);						for(var k:int = 0; k < T.length; k++){				S[k] = getNBezierPoint(k);								switch( brush ){					case BrushType.REGULAR: graphics.lineStyle(thickness, color, transparency); break;					case BrushType.BRUSH1: graphics.lineStyle(Math.pow(k / T.length, 0.2) * thickness, color, transparency); break;					case BrushType.BRUSH2: graphics.lineStyle(Math.pow(k / T.length, 0.5) * thickness, color, transparency); break;					case BrushType.BRUSH3: graphics.lineStyle(Math.pow(k / T.length, 2) * thickness, color, transparency); break;					case BrushType.BRUSH4: graphics.lineStyle(Math.pow(k / T.length, 5) * thickness, color, transparency); break;				}								if( k == 0 ) graphics.moveTo(S[0].x, S[0].y);				else graphics.lineTo(S[k].x, S[k].y);			}		}				private function getNBezierPoint(k:int):Point {			var t:Number = T[k];						var p:Point = new Point();			for(var i:int = 0; i < nPoints; i++){				var r:Number = MathCurves.B(i, nPoints, t);				p = MathCurves.addPoints(p, MathCurves.multPoint(r, pArray[i]));			}			return p;		}	}}