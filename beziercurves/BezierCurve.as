package beziercurves {	import beziercurves.curves.NBezierCurve;	import beziercurves.events.BezierEvent;	import flash.events.MouseEvent;	import beziercurves.display.Details;	import beziercurves.display.ControlPoint;	import beziercurves.display.AnchorPoint;	import beziercurves.utils.PointArray;	import flash.geom.Point;	import flash.display.Sprite;		/**	 * @author nico	 */	public class BezierCurve extends Sprite {		public static var verbose:Boolean = false;		private var pArray:PointArray = new PointArray();		private var thickness:int;		private var color:Number;		private var transparency:Number;		private var _editable:Boolean;		private var details:Details;		private var curve:Sprite = new Sprite();		private var precision:int;						public function BezierCurve(thickness:int = 5, color:Number = 0x000000, transparency:Number = 1, editable:Boolean = false, precision:int = 200) {			this.editable = editable;			this.thickness = thickness;			this.color = color;			this.transparency = transparency;			this.precision = precision;						addChild(curve);		}				/**		 * add an anchor point to the actual path		 */		public function addAnchor(x:Number, y:Number):void {			pArray.push(new AnchorPoint(x, y));			draw();		}				/**		 * add a control point to the actual path		 */		public function addControl(x:Number, y:Number):void {			pArray.push(new ControlPoint(x, y));			draw();		}				/**		 * extends the actual path with this new one		 * the new path is a serie of anchor and control points		 */		public function addPath(... args):void {			pArray.push.apply(null, args);			draw();		}				/**		 * set the style of the curve to display		 */		public function lineStyle(thickness:int = 5, color:Number = 0x000000, transparency:Number = 1):void {			this.thickness = thickness;			this.color = color;			this.transparency = transparency;		}				/**		 * draw curve on screen		 */		public function draw():void {			var p0:Point = null;			var p1:Point;			var controls:Array = [];						removeChild(curve);			curve = new Sprite();			addChild(curve);			editable = _editable;			if( details ) setChildIndex(details, numChildren - 1);						for each(var p:Object in pArray){				if( p.constructor === AnchorPoint ){					if( !p0 ){						p0 = Point(p);					} else {						p1 = Point(p);												var b:NBezierCurve = new NBezierCurve(p0, p1, controls, thickness, color, transparency, precision);						curve.addChild(b);												p0 = p1;						controls = [];					}				} else if( p.constructor === ControlPoint ){					controls.push(p);				}			}						if( details ) details.update();		}				/**		 * lets edit or not the curve		 * if yes, shows details (anchor/control points) and lets move them with redraw of the curve		 */		public function set editable(editable:Boolean):void {			_editable = editable;			if( editable ) curve.addEventListener(MouseEvent.MOUSE_DOWN, editorHandler);			else curve.removeEventListener(MouseEvent.MOUSE_DOWN, editorHandler);		}				private function editorHandler(e:MouseEvent = null):void {			if( !details ){				dispatchEvent(new BezierEvent(BezierEvent.START_EDITING));				details = new Details(pArray);				addChild(details);				details.draw();			} else {				dispatchEvent(new BezierEvent(BezierEvent.END_EDITING));				removeChild(details);				details = null;								if( verbose ) pArray.export();			}		}		public function get editable():Boolean {			return _editable;		}				public function closeEditor():void {			if( details ){				removeChild(details);				details = null;			}		}				public function set showEditor(flag:Boolean):void {			if( !editable ) editable = true;			if( flag ) editorHandler();			else closeEditor();		}	}}